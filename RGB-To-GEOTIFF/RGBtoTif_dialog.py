# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RGBtoTifDialog
                                 A QGIS plugin
 RGBtoTif
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-05-11
        git sha              : $Format:%H$
        copyright            : (C) 2025 by vce
        email                : gvreddy718@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# -*- coding: utf-8 -*-
import os
from qgis.PyQt import uic, QtWidgets
from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS
from osgeo import gdal, osr, gdalnumeric

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'RGBtoTif_dialog_base.ui'))

class RGBtoTifDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(RGBtoTifDialog, self).__init__(parent)
        self.setupUi(self)

        # Connect the button
        self.pushButton.clicked.connect(self.convert_to_geotiff)

    def get_decimal_from_dms(self, dms, ref):
        degrees, minutes, seconds = dms
        dec = float(degrees) + float(minutes) / 60 + float(seconds) / 3600
        return -dec if ref in ['S', 'W'] else dec


    def extract_gps(self, image_path):
        img = Image.open(image_path)
        exif = img._getexif()
        gps = {}
        if exif:
            for tag, val in exif.items():
                if TAGS.get(tag) == "GPSInfo":
                    for t in val:
                        gps[GPSTAGS.get(t, t)] = val[t]
        if "GPSLatitude" in gps and "GPSLongitude" in gps:
            lat = self.get_decimal_from_dms(gps["GPSLatitude"], gps["GPSLatitudeRef"])
            lon = self.get_decimal_from_dms(gps["GPSLongitude"], gps["GPSLongitudeRef"])
            return lat, lon
        return None, None

    def convert_to_geotiff(self):
        input_path = self.mQgsFileWidget.filePath()
        output_path = self.mQgsFileWidget_2.filePath()

        if not os.path.exists(input_path):
            self.label_3.setText("Input image not found.")
            return

        lat, lon = self.extract_gps(input_path)
        if lat is None or lon is None:
            self.label_3.setText("No GPS metadata found in image.")
            return

        img = Image.open(input_path).convert('RGB')
        width, height = img.size

        pixel_size = 0.00001  # Approx 1 meter resolution at equator

        driver = gdal.GetDriverByName('GTiff')
        dataset = driver.Create(output_path, width, height, 3, gdal.GDT_Byte)

        geotransform = [
            lon - (width // 2) * pixel_size,
            pixel_size,
            0,
            lat + (height // 2) * pixel_size,
            0,
            -pixel_size
        ]
        dataset.SetGeoTransform(geotransform)

        srs = osr.SpatialReference()
        srs.ImportFromEPSG(4326)  # WGS 84
        dataset.SetProjection(srs.ExportToWkt())

        r, g, b = img.split()
        dataset.GetRasterBand(1).WriteArray(gdalnumeric.numpy.array(r))
        dataset.GetRasterBand(2).WriteArray(gdalnumeric.numpy.array(g))
        dataset.GetRasterBand(3).WriteArray(gdalnumeric.numpy.array(b))

        dataset.FlushCache()
        dataset = None

        self.label_3.setText("GeoTIFF created successfully.")
